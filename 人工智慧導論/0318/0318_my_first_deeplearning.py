# -*- coding: utf-8 -*-
"""0318-my_first_deeplearning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iU07rqNHX6Msq9Ak4sxa2420ZW2LVPFJ
"""

from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

(x_train_img, y_train_label), (x_test_img, y_test_label) = mnist.load_data()

print("x_train_img",x_train_img.shape)
print("y_train_label",y_train_label.shape)
print(x_test_img.shape)
print(y_test_label.shape)

x_train_img[0]

y_train_label[0]

# Define plot_image function, input parameter image
def plot_image(image):
    fig = plt.gcf() #Set display figure size
    fig.set_size_inches(2, 2)
    plt.imshow(image, cmap='binary') #input parameter image, graph with 28*28px, camp='binary' represent monochrome
    plt.show()

plot_image(x_train_img[0])

# One-hot encoding
from tensorflow.keras.utils import to_categorical

#10 class
#Number0 [1,0,0,0,0,0,0,0,0,0]
#Number1 [0,1,0,0,0,0,0,0,0,0]
#...................
#Number9 [0,0,0,0,0,0,0,0,0,9]
y_train_label = to_categorical(y_train_label, 10)
y_test_label = to_categorical(y_test_label, 10)

x_train_img = x_train_img.reshape(60000, 784).astype('float32')
x_test_img = x_test_img.reshape(10000, 784).astype('float32')
print(x_train_img.shape)
print(x_test_img.shape)
print(y_train_label.shape)
print(y_test_label.shape)

x_test_img[0]

y_train_label[0]

my_first_model = Sequential()
my_first_model.add(Dense(units=256, activation='relu', input_dim=784))
my_first_model.add(Dense(units=10, activation='softmax'))

print(my_first_model.summary())

my_first_model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

my_first_model.fit(x_train_img, y_train_label, epochs=20, batch_size=1024)

score = my_first_model.evaluate(x_test_img, y_test_label)
print("Accuracy:", score[1])

#my_first_model.save('my_first_model.h5')
#my_first_model.save_weights('my_first_model.weights.h5')

predict = my_first_model.predict(x_test_img)
print(predict[0])
print(y_test_label[0])

#設定epochs為10, batch_size為128, 測試資料準確率約為0.9724
#增加batch_size至256, 測試資料準確率提升到0.9744
#增加epoch至15, 測試資料準確率提升到0.9768
#增加batch_size至512, 測試資料準確率提升到0.9788
#增加epoch至20, 測試資料準確率降低到0.9761
#增加batch_size至1024, 測試資料準確率提升到0.9792
#之後的調整皆無法使測試資料準確率再提升，最終測試資料準確率為0.9792, 訓練資料準確率為0.9999